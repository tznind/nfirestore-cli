
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.1.0.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace nfirestore_cli {
    using Google.Cloud.Firestore;
    using Terminal.Gui;
    
    
    public partial class MainWindow {
        private readonly Options options;
        private TileView tiles;
        private NavigationPane navigation;
        private TabsPane tabs;

        public MainWindow(Options o) {
            InitializeComponent();

            tiles = new TileView(2)
            {
                Width = Dim.Fill(),
                Height = Dim.Fill(),
                Y = 1
            };
            tiles.LineStyle = LineStyle.Single;

            navigation = new NavigationPane(this);

            tiles.Tiles.ElementAt(0).Title = "Collections";
            tiles.Tiles.ElementAt(0).ContentView.Add(navigation);

            tiles.Tiles.ElementAt(1).Title = "Document";

            tabs = new TabsPane()
            {
                Width = Dim.Fill(),
                Height = Dim.Fill()
            };

            SetDocumentTitle("Document");
            tiles.Tiles.ElementAt(1).ContentView.Add(tabs);
            this.Add(tiles);
            
            this.options = o;
            createTestDocumentsMenuItem.Action = CreateTestDocuments;
            createTestNestedDocumentsMenuItem.Action = CreateNestedTestDocuments;
            exitMenuItem.Action = ()=>Application.RequestStop();
        }

        private void SetDocumentTitle(string value)
        {
            tiles.Tiles.ElementAt(1).Title = value;
        }

        public void ShowDocument(string text)
        {
            if(navigation.Db == null || string.IsNullOrWhiteSpace(text))
            {
                return;
            }
            try
            {
                ShowDocument(navigation.Db.Document(text),false);
            }
            catch (Exception ex)
            {
                ShowException(ex);
            }
        }

        public void ShowDocument(DocumentReference dr, bool inNewTab)
        {
            try
            {
                var snap = dr.GetSnapshotAsync().Result;
                SetDocumentTitle("Data - " + dr.Id);
                tabs.OpenDocument(snap, inNewTab);
            }
            catch (Exception ex)
            {
                ShowException(ex);
            }
        }

        internal void OpenCollection(CollectionReference cr, IEnumerable<DocumentReference> children)
        {
            tabs.OpenCollection(cr, children);
        }

        private void CreateNestedTestDocuments()
        {
            try
            {
                TestDataCreator.CreateNestedDocument(navigation.Db);
                navigation.RefreshTree();
            }
            catch (Exception ex)
            {
                ShowException(ex);
            }
        }

        private void CreateTestDocuments()
        {
            if(navigation.Db == null)
            {
                return;
            }
            try
            {
                TestDataCreator.CreateTestDocument(navigation.Db);
                navigation.RefreshTree();
            }
            catch (Exception ex)
            {
                ShowException(ex);
            }
        }


        public void ShowException(Exception ex)
        {
            MessageBox.ErrorQuery("Error", ex.Message, "Close");
        }

        public override void OnLoaded()
        {
            base.OnLoaded();

            navigation.SetDatabase(options);
        }

    }
}
