
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.1.0.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace nfirestore_cli
{
    using Terminal.Gui;


    public partial class DatabaseSelector
    {

        public bool Exit { get; private set; }

        public DatabaseSelector(Options options)
        {
            InitializeComponent();

            this.label6.X = Pos.AnchorEnd(label6.Text.Length);
            this.label4.X = Pos.AnchorEnd(label4.Text.Length);

            if (!string.IsNullOrWhiteSpace(options.Project))
            {
                tfProject.Text = options.Project;
            }
            tfProject.TextChanged += (s, e) => { options.Project = tfProject.Text; };

            if (!string.IsNullOrWhiteSpace(options.Database))
            {
                tfDatabase.Text = options.Database;
            }
            tfDatabase.TextChanged += (s, e) => { options.Database = tfDatabase.Text; };

            tfMaxResults.Text = options.Limit.ToString();

            tfMaxResults.TextChanged += (s, e) =>
            {
                if (int.TryParse(tfMaxResults.Text, out var newLimit))
                {
                    options.Limit = newLimit;
                }
            };

            if (!string.IsNullOrWhiteSpace(options.EmulatorUrl))
            {
                tfEmulator.Text = options.EmulatorUrl;
            }
            else
            {
                var envValue = Environment.GetEnvironmentVariable(Options.EmulatorEnvVarKey);

                if (!string.IsNullOrWhiteSpace(envValue))
                {
                    tfEmulator.Text = envValue;
                    options.EmulatorUrl = envValue;
                }
            }
            tfEmulator.TextChanged += (s, e) => { options.EmulatorUrl = tfEmulator.Text; };

            btnOk.Accept += (s, e) =>
            {
                Application.RequestStop();
            };

            btnExit.Accept += (s, e) =>
            {
                this.Exit = true;
                Application.RequestStop();
            };

            spinnerView.Visible = false;

            btnTest.Accept += (s, e) =>
            {

                spinnerView.Visible = true;

                Task.Run(() =>
                {
                    try
                    {
                        var factory = new DatabaseFactory();
                        var db = factory.Create(options);
                        var rootCollectionsCount = db.ListRootCollectionsAsync().ToListAsync().Result.Count;

                        Application.Invoke(() =>
                        {
                            lblSuccess.Text = $"Connected successfully and found {rootCollectionsCount} root collections";
                            lblSuccess.Visible = true;
                            lblError.Visible = false;
                            spinnerView.Visible = false;
                        });
                    }
                    catch (Exception ex)
                    {
                        Application.Invoke(() =>
                        {
                            lblError.Text = string.Join('\n',Wrap(ex.Message, lblError.Frame.Width));
                            lblError.Visible = true;
                            lblSuccess.Visible = false;
                            spinnerView.Visible = false;
                        });
                    }
                });
            };
        }

        /// <summary>
        /// Returns a list of strings no larger than the max length sent in.
        /// </summary>
        /// <remarks>useful function used to wrap string text for reporting.</remarks>
        /// <param name="text">Text to be wrapped into of List of Strings</param>
        /// <param name="maxLength">Max length you want each line to be.</param>
        /// <returns>List of Strings</returns>
        private static List<String> Wrap(string text, int maxLength)
        {
            // Return empty list of strings if the text was empty
            if (text.Length == 0) return new List<string>();
            
            var words = text.Split(' ');

            var lines = new List<string>();

            var currentLine = "";

            foreach (var currentWord in words)
            {
                if ((currentLine.Length > maxLength) ||
                    ((currentLine.Length + currentWord.Length) > maxLength))

                {
                    lines.Add(currentLine);
                    currentLine = "";
                }

                if (currentLine.Length > 0)
                    currentLine += " " + currentWord;
                else
                    currentLine += currentWord;
            }


            if (currentLine.Length > 0)
                lines.Add(currentLine);

            return lines;

        }


    }
}
