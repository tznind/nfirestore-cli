
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.1.0.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace nfirestore_cli {
    using Google.Cloud.Firestore;
    using System;
    using Terminal.Gui;


    public partial class NavigationPane {
        public FirestoreDb Db { get; private set; }

        public MainWindow MainWindow { get; }

        public NavigationPane(MainWindow mainWindow) {
            InitializeComponent();

            tfLookup.KeyDown += TextField_KeyDown;
            MainWindow = mainWindow;
        }

        private void TextField_KeyDown(object sender, Key e)
        {
            if (e.KeyCode == Key.Enter && !e.Handled)
            {
                MainWindow.ShowDocument(tfLookup.Text);
            }
        }


        public void RefreshTree()
        {
            var selectedItem = treeView1.SelectedObject;
            if (Db == null)
            {
                return;
            }
            try
            {
                treeView1.ClearObjects();
                var collections = Db.ListRootCollectionsAsync().ToArrayAsync().Result;
                if (collections.Length > 0)
                {
                    treeView1.AddObjects(collections);
                    
                    if (selectedItem == null) return;
                    // Set the tab to the correct document/collection
                    SetDocumentOrCollection(selectedItem);
                    // Select the correct item and expand the path to it
                    treeView1.SelectedObject = selectedItem;
                    ExpandToSelectedItem(selectedItem);
                }
            }
            catch (Exception ex)
            {
                MainWindow.ShowException(ex);
            }
        }

        internal void SetDatabase(Options options)
        {

            try
            {

                var factory = new DatabaseFactory();
                this.Db = factory.Create(options);

                treeView1.TreeBuilder = new FirestoreTreeBuilder(this.Db, options.Limit);
                treeView1.AspectGetter = FirestoreTreePresenter.AspectGetter;
                treeView1.SelectionChanged += TlvObjects_SelectionChanged;
                treeView1.ObjectActivated += TreeView1OnObjectActivated;

                RefreshTree();
            }
            catch (Exception ex)
            {
                MessageBox.ErrorQuery("Error Loading",ex.Message, "Close");
            }
        }

        private void TreeView1OnObjectActivated(object sender, ObjectActivatedEventArgs<object> e)
        {
            SetDocumentOrCollection(treeView1.SelectedObject);
        }

        private void SetDocumentOrCollection(Object selectedObject)
        {
            if (selectedObject is DocumentReference dr)
            {
                MainWindow.ShowDocument(dr, true);
            }

            if (selectedObject is CollectionReference cr)
            {
                MainWindow.OpenCollection(cr, treeView1.TreeBuilder.GetChildren(cr).OfType<DocumentReference>());
            }
        }

        private void TlvObjects_SelectionChanged(object sender, SelectionChangedEventArgs<object> e)
        {
            if (treeView1.SelectedObject is DocumentReference dr)
            {
                MainWindow.ShowDocument(dr, false);
            }
        }
        
        private void ExpandToSelectedItem(object selectedItem)
        {
            var path = new List<object> { selectedItem };
            GetParentsOfSelection(path, selectedItem);
            foreach (var o in path)
            {
                treeView1.Expand(o);
            }
        }
        
        private void GetParentsOfSelection(List<object> path, object selectedItem)
        {
            if (selectedItem is DocumentReference dr && dr.Parent != null)
            {
                path.Insert(0, dr.Parent);
                GetParentsOfSelection(path, dr.Parent);
            } else if (selectedItem is CollectionReference cr && cr.Parent != null)
            {
                path.Insert(0, cr.Parent);
                GetParentsOfSelection(path, cr.Parent);
            }
        }
    }
}
