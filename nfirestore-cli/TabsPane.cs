
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.1.0.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace nfirestore_cli {
    using Google.Cloud.Firestore;
    using Newtonsoft.Json;
    using System;
    using Terminal.Gui;
    
    
    public partial class TabsPane {
        
        public TabsPane() {
            InitializeComponent();

            this.tabView.TabClicked += TabView_TabClicked;
        }

        Dictionary<DocumentReference, Tab> openTabs = new Dictionary<DocumentReference, Tab>();

        private void TabView_TabClicked(object sender, TabMouseEventArgs e)
        {
            // Middle mouse click in tab
            if(e.MouseEvent.Flags == MouseFlags.Button2Clicked)
            {
                CloseTab(e.Tab);
            }

            // TODO: work out the offset within the tab to support clicking the [X]
        }

        private void CloseTab(Tab tab)
        {
            var kvp = openTabs.FirstOrDefault(kvp => kvp.Value == tab);

            // if we can close it
            if (kvp.Value != default(Tab))
            {
                openTabs.Remove(kvp.Key);
                tabView.RemoveTab(tab);
                tabView.SetNeedsDisplay();
            }
        }

        internal void OpenDocument(DocumentSnapshot snap, bool newTab)
        {
            if(newTab)
            {
                // If document is already open in another tab
                if (openTabs.ContainsKey(snap.Reference))
                {
                    // switch to it
                    tabView.SelectedTab = openTabs[snap.Reference];
                    return;
                }

                var name = GetTabName(snap);
                var view = new TextView
                {
                    Width = Dim.Fill(),
                    Height = Dim.Fill(),
                    WordWrap = false,
                    AllowsReturn = false,
                    Multiline = true,
                };

                var tab = new Tab()
                {
                    Text = name,
                    View = view
                };

                tabView.AddTab(tab, true);
                openTabs.Add(snap.Reference, tab);
                OpenDocumentIn(view, snap);
            }
            else
            {
                OpenDocumentIn(currentDocumentTextView, snap);
            }
        }

        private string GetTabName(DocumentSnapshot snap)
        {
            string name = snap.Reference.Id;
            if(name.Length > 8)
            {
                name = name.Substring(0, 6) + "…";
            }

            return "[X]" + name;
        }

        private void OpenDocumentIn(TextView currentDocumentTextView, DocumentSnapshot snap)
        {
            currentDocumentTextView.Text = JsonConvert.SerializeObject(snap.ToDictionary(), Formatting.Indented);
        }
    }
}
